//20113574 ¼³Çö¼ö//

#include <iostream>
#include <time.h>

#define SWAP(a,b) temp = a; a = b; b = temp;

#define MAX 10000
#define num 100

using namespace std;

void mergeSort(int arr[], int a, int b);
void merge(int arr[], int a, int b, int c);

void quickSort(int arr[], int a, int b);
int partition(int arr[], int a, int b);

void heapSort(int arr[], int a);
void buildHeap(int arr[], int a);
void heapify(int arr[], int a, int b);

void printArr(int arr[], int a);

clock_t current_tick = clock();
double current_sec = current_tick / CLOCKS_PER_SEC;

int main() {

	clock_t beginT, endT;

	////////////////////make arr/////////////////

	int arr[num];
	long seed;
	seed = time(NULL);
	srand(seed);

	int a = 100;

	for (int i = 0; i < num; i++)
	{
		a = rand() % MAX;
		arr[i] = a;
	}



	/////////////////////sort//////////////////

	cout << "choose sorting algorithm" << endl;
	cout << "1 : merge    2: quick    3: heap          5: cancel " << endl;

	int choose;
	cin >> choose;
	cout << endl;

	beginT = clock();





	switch (choose) {
	case 1: mergeSort(arr, 0, num - 1); break;
	case 2: quickSort(arr, 0, num - 1); break;
	case 3: heapSort(arr, num); break;
	case 5: break;
	}

	endT = clock();

	/////////////////////print////////////////////

	printArr(arr, num);


	cout << endl << endl;
	cout << "running time is : " << (double)(endT - beginT) / CLOCKS_PER_SEC << endl;

	return 0;

}
//////////////////////////////////////////////////////////////

void printArr(int arr[], int n) {

	for (int i = 0; i < n - 1; i++)
	{
		cout << arr[i] << " ";
		if (i % 10 == 0 && i > 1)
			cout << endl;
	}

	cout << endl << endl;
}

//////////////////////////////////////////////////////////////////

void buildHeap(int arr[], int n) {

	for (int i = n / 2; i <= 1; i--)
		heapify(arr, i, n);
}

void heapSort(int arr[], int n) {

	buildHeap(arr, n);
	for (int i = n - 1; i <= 1; i--) {
		swap(arr[0], arr[i]);
		heapify(arr, 1, n - 1);
	}

}

void heapify(int arr[], int k, int n) {

	int left = 2 * k;
	int  right = 2 * k + 1;
	int smaller;

	if (right <= n) {
		if (arr[left] < arr[right]) {
			smaller = left;
		}
		else
			smaller = right;
	}

	else if (left <= n)
		smaller = left;

	else
		return;


	if (arr[smaller] < arr[k]) {
		swap(arr[k], arr[smaller]);
		heapify(arr, smaller, n);
	}
}

//////////////////////////////////////////////////////////////
void quickSort(int arr[], int left, int right) {

	if (left < right) {

		int index = partition(arr, left, right);
		quickSort(arr, left, index - 1);
		quickSort(arr, index + 1, right);

	}


}

int partition(int arr[], int left, int right) {

	int pivot = arr[right];
	int i = left; int j = left;


	while (j < right) {

		if (arr[j] > pivot)
			j++;
		else {
			swap(arr[i], arr[j]);
			i++;
			j++;
		}

	}


	if (j == right)
		swap(arr[i], arr[right]);

	return i;

}

//////////////////////////////////////////////////////////////


void mergeSort(int arr[], int left, int right) {

	int mid = (left + right) / 2;

	if (left < right) {
		mergeSort(arr, left, mid);
		mergeSort(arr, mid + 1, right);
		merge(arr, left, mid, right);
	}

}


void merge(int arr[], int left, int mid, int right) {

	int i = left;
	int j = mid + 1;
	int t = 0;
	int a;
	int tempArr[num];

	while (i <= mid && j <= right) {

		if (arr[i] < arr[j])
		{
			tempArr[t] = arr[i];
			i++;
		}
		else
		{
			tempArr[t] = arr[j];
			j++;
		}

		t++;
	}


	while (i <= mid) {
		tempArr[t++] = arr[i++];
	}

	while (j <= right) {
		tempArr[t++] = arr[j++];
	}


	t = 0;

	for (a = left; a <= right; a++) {
		arr[a] = tempArr[t++];
	}



}


//////////////////////////////////////////////////////////////

