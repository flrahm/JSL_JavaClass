#include <iostream>
#include <time.h>

#define MAX 9

using namespace std;

void strsn(int **A, int **B, int **C, int n);    // A 와 B를 곱하여 C에 저장, n : 행렬의 사이즈 

void mat_sub(int **A, int **B, int **C, int n);
void mat_add(int **A, int **B, int **C, int n);
void mat_mult(int **A, int **B, int **C, int n);

clock_t current_tick = clock();
double current_sec = current_tick / CLOCKS_PER_SEC;

int main() {



	///
	clock_t beginT, endT;
	long seed;
	seed = time(NULL);
	srand(seed);

	///////////make arr/////////////////
	cout << "2^n의 행렬을 생성합니다. n값을 입력해주세요 : ";
	int n_invol;
	cin >> n_invol;

	int n = 1;

	for (int i = 0; i < n_invol; i++)
		n = n * 2;

	cout << endl;
	///

	int** A = new int*[n];
	int** B = new int*[n];
	int** C = new int*[n];


	for (int i = 0; i < n; i++) {
		A[i] = new int[n];
		B[i] = new int[n];
		C[i] = new int[n];
	}

	///

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			A[i][j] = rand() % MAX;
			B[i][j] = rand() % MAX;
			C[i][j] = 0;
		}


	////////////strsn//////////////
	beginT = clock();
	//

	strsn(A,B,C,n);

	//
	endT = clock();
	///////////////////////


	/////////print/////////////
	///////////////////////print //////////////////////
	int aa = 1;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			cout << A[i][j] << " ";
			if (aa % n == 0) {
				cout << endl;
			}
			aa++;

		}
	cout << endl;
	aa = 1;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			cout << B[i][j] << " ";
			if (aa % n == 0) {
				cout << endl;
			}
			aa++;

		}
	cout << endl;
	aa = 1;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			cout << C[i][j] << " ";
			if (aa % n == 0) {
				cout << endl;
			}
			aa++;

		}



	cout << endl << endl;
	cout << "running time is : " << (double)(endT - beginT) / CLOCKS_PER_SEC << endl;


	return 0;

}


void strsn(int **A, int **B, int **C, int n) {

	if (n <= 4) {
		mat_mult(A, B, C, n);
	}

	else {
		//A 를 4개의 부분행렬로 분할
		//B 를 4개의 부분행렬로 분할

		//쉬트라센을 이용하여 행렬 결합
		////////////////////배열 생성/////////////////////////////////////////
		int** A11 = new int*[n / 2];
		int** A12 = new int*[n / 2];
		int** A21 = new int*[n / 2];
		int** A22 = new int*[n / 2];
		int** B11 = new int*[n / 2];
		int** B12 = new int*[n / 2];
		int** B21 = new int*[n / 2];
		int** B22 = new int*[n / 2];

		int** m1 = new int*[n / 2];
		int** m2 = new int*[n / 2];
		int** m3 = new int*[n / 2];
		int** m4 = new int*[n / 2];
		int** m5 = new int*[n / 2];
		int** m6 = new int*[n / 2];
		int** m7 = new int*[n / 2];

		int **temp1 = new int *[n/2];
		int **temp2 = new int *[n/2];

		for (int i = 0; i < n / 2; i++)
		{

			A11[i] = new int[n / 2];
			A12[i] = new int[n / 2];
			A21[i] = new int[n / 2];
			A22[i] = new int[n / 2];
			B11[i] = new int[n / 2];
			B12[i] = new int[n / 2];
			B21[i] = new int[n / 2];
			B22[i] = new int[n / 2];

			m1[i] = new int[n / 2];
			m2[i] = new int[n / 2];
			m3[i] = new int[n / 2];
			m4[i] = new int[n / 2];
			m5[i] = new int[n / 2];
			m6[i] = new int[n / 2];
			m7[i] = new int[n / 2];

			temp1[i] = new int[n/2];
			temp2[i] = new int[n/2];
		}
		///////////////////////////////////////////////////

		for (int i = 0; i < n / 2; i++)
			for (int j = 0; j < n / 2; j++) {
				A11[i][j] = A[i][j];
				B11[i][j] = B[i][j];

				A12[i][j] = A[i][j + n / 2];
				B12[i][j] = B[i][j + n / 2];

				A21[i][j] = A[i + n / 2][j];
				B21[i][j] = B[i + n / 2][j];

				A22[i][j] = A[i + n / 2][j + n / 2];
				B22[i][j] = B[i + n / 2][j + n / 2];
			}

	
		//////////////////////////////////////////////
		////m1
		mat_add(A11, A22, temp1, n / 2);
		mat_add(B11, B22, temp2, n / 2);
		strsn(temp1, temp2, m1, n / 2);

		////m2
		mat_add(A21, A22, temp1, n / 2);
		strsn(temp1, B11, m2, n / 2);

		////m3
		mat_sub(B12, B22, temp1, n / 2);
		strsn(A11, temp1, m3, n / 2);

		////m4
		mat_sub(B21, B11, temp1, n / 2);
		strsn(A22, temp1, m4, n / 2);

		////m5
		mat_add(A11, A12, temp1, n / 2);
		strsn(temp1, B22, m5, n / 2);

		////m6
		mat_sub(A21, A11, temp1, n / 2);
		mat_add(B11, B12, temp2, n / 2);
		strsn(temp1, temp2, m6, n / 2);

		////m7
		mat_sub(A12, A22, temp1, n / 2);
		mat_add(B21, B22, temp2, n / 2);
		strsn(temp1, temp2, m7, n / 2);

		//////////////////////////////////////
		for (int i = 0; i < n / 2; i++)
			for (int j = 0; j < n/2; j++) {
				C[i][j] = m1[i][j] + m4[i][j] - m5[i][j] + m7[i][j];
				C[i][j + n / 2] = m3[i][j] + m5[i][j];
				C[i + n / 2][j] = m2[i][j] + m4[i][j];
				C[i + n / 2][j + n / 2] = m1[i][j] + m3[i][j] - m2[i][j] + m6[i][j];
			}

		
	}
}







void mat_sub(int **A, int **B, int **C, int n) {

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			C[i][j] = A[i][j] - B[i][j];

}

void mat_add(int **A, int **B, int **C, int n) {

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			C[i][j] = A[i][j] + B[i][j];

}

void mat_mult(int **A, int **B, int **C, int n) {

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			for (int k = 0; k < n; k++)
				C[i][j] = A[i][k] * B[k][j];

}